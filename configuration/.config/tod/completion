#compdef tod

autoload -U is-at-least

_tod() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-c+[Absolute path of configuration. Defaults to \$XDG_CONFIG_HOME/tod.cfg]:CONFIG:_files' \
'--config=[Absolute path of configuration. Defaults to \$XDG_CONFIG_HOME/tod.cfg]:CONFIG:_files' \
'-t+[Time to wait for a response from API in seconds. Defaults to 30]:TIMEOUT:_default' \
'--timeout=[Time to wait for a response from API in seconds. Defaults to 30]:TIMEOUT:_default' \
'-v[Display additional debug info while processing]' \
'--verbose[Display additional debug info while processing]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_tod_commands" \
"*::: :->tod" \
&& ret=0
    case $state in
    (tod)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-command-$line[1]:"
        case $line[1] in
            (project)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-project-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-n+[Project name]:NAME:_default' \
'--name=[Project name]:NAME:_default' \
'-d+[Project description]:DESCRIPTION:_default' \
'--description=[Project description]:DESCRIPTION:_default' \
'-i[Whether the project is marked as favorite]' \
'--is-favorite[Whether the project is marked as favorite]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(remove)
_arguments "${_arguments_options[@]}" : \
'-p+[Project to remove]:PROJECT:_default' \
'--project=[Project to remove]:PROJECT:_default' \
'-a[Remove all projects from config that are not in Todoist]' \
'--auto[Remove all projects from config that are not in Todoist]' \
'-r[Keep repeating prompt to remove projects. Use Ctrl/CMD + c to exit]' \
'--repeat[Keep repeating prompt to remove projects. Use Ctrl/CMD + c to exit]' \
'-l[Remove all projects from config]' \
'--all[Remove all projects from config]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
'-p+[Project to remove]:PROJECT:_default' \
'--project=[Project to remove]:PROJECT:_default' \
'-r[Keep repeating prompt to delete projects. Use Ctrl/CMD + c to exit]' \
'--repeat[Keep repeating prompt to delete projects. Use Ctrl/CMD + c to exit]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(rename)
_arguments "${_arguments_options[@]}" : \
'-p+[Project to remove]:PROJECT:_default' \
'--project=[Project to remove]:PROJECT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
'-a[Add all projects to config that are not there aleady]' \
'--auto[Add all projects to config that are not there aleady]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(empty)
_arguments "${_arguments_options[@]}" : \
'-p+[Project to remove]:PROJECT:_default' \
'--project=[Project to remove]:PROJECT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__project__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-project-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(remove)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rename)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(empty)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(section)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__section_commands" \
"*::: :->section" \
&& ret=0

    case $state in
    (section)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-section-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-n+[Section name]:NAME:_default' \
'--name=[Section name]:NAME:_default' \
'-p+[Project to put the section in]:PROJECT:_default' \
'--project=[Project to put the section in]:PROJECT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__section__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-section-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(task)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__task_commands" \
"*::: :->task" \
&& ret=0

    case $state in
    (task)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-task-command-$line[1]:"
        case $line[1] in
            (quick-add)
_arguments "${_arguments_options[@]}" : \
'*-c+[Content for task. Add a reminder at the end by prefixing the natural language date with \`!\`. Example\: Get milk on sunday !saturday 4pm]:CONTENT:_default' \
'*--content=[Content for task. Add a reminder at the end by prefixing the natural language date with \`!\`. Example\: Get milk on sunday !saturday 4pm]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
'-p+[The project into which the task will be added]:PROJECT:_default' \
'--project=[The project into which the task will be added]:PROJECT:_default' \
'-u+[Date date in format YYYY-MM-DD, YYYY-MM-DD HH\:MM, or natural language]:DUE:_default' \
'--due=[Date date in format YYYY-MM-DD, YYYY-MM-DD HH\:MM, or natural language]:DUE:_default' \
'-d+[Description for task]:DESCRIPTION:_default' \
'--description=[Description for task]:DESCRIPTION:_default' \
'-c+[Content for task]:CONTENT:_default' \
'--content=[Content for task]:CONTENT:_default' \
'-r+[Priority from 1 (without priority) to 4 (highest)]:PRIORITY:_default' \
'--priority=[Priority from 1 (without priority) to 4 (highest)]:PRIORITY:_default' \
'*-l+[List of labels to choose from, to be applied to each entry. Use flag once per label]:LABEL:_default' \
'*--label=[List of labels to choose from, to be applied to each entry. Use flag once per label]:LABEL:_default' \
'-n[Do not prompt for section]' \
'--no-section[Do not prompt for section]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the task]:PROJECT:_default' \
'--project=[The project containing the task]:PROJECT:_default' \
'-f+[The filter containing the task]:FILTER:_default' \
'--filter=[The filter containing the task]:FILTER:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the task]:PROJECT:_default' \
'--project=[The project containing the task]:PROJECT:_default' \
'-f+[The filter containing the task]:FILTER:_default' \
'--filter=[The filter containing the task]:FILTER:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(comment)
_arguments "${_arguments_options[@]}" : \
'-c+[Content for comment]:CONTENT:_default' \
'--content=[Content for comment]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__task__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-task-help-command-$line[1]:"
        case $line[1] in
            (quick-add)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(comment)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__list_commands" \
"*::: :->list" \
&& ret=0

    case $state in
    (list)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-list-command-$line[1]:"
        case $line[1] in
            (view)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the tasks]:PROJECT:_default' \
'--project=[The project containing the tasks]:PROJECT:_default' \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(process)
_arguments "${_arguments_options[@]}" : \
'-p+[Complete all tasks that are due today or undated in a project individually in priority order]:PROJECT:_default' \
'--project=[Complete all tasks that are due today or undated in a project individually in priority order]:PROJECT:_default' \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(prioritize)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the tasks]:PROJECT:_default' \
'--project=[The project containing the tasks]:PROJECT:_default' \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(timebox)
_arguments "${_arguments_options[@]}" : \
'-p+[Timebox all tasks without durations]:PROJECT:_default' \
'--project=[Timebox all tasks without durations]:PROJECT:_default' \
'-f+[The filter containing the tasks, does not filter out tasks with durations unless specified in filter. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks, does not filter out tasks with durations unless specified in filter. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(label)
_arguments "${_arguments_options[@]}" : \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-p+[The project containing the tasks]:PROJECT:_default' \
'--project=[The project containing the tasks]:PROJECT:_default' \
'*-l+[Labels to select from, if left blank this will be fetched from API]:LABEL:_default' \
'*--label=[Labels to select from, if left blank this will be fetched from API]:LABEL:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(schedule)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the tasks]:PROJECT:_default' \
'--project=[The project containing the tasks]:PROJECT:_default' \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-s[Don'\''t re-schedule recurring tasks that are overdue]' \
'--skip-recurring[Don'\''t re-schedule recurring tasks that are overdue]' \
'-o[Only schedule overdue tasks]' \
'--overdue[Only schedule overdue tasks]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(deadline)
_arguments "${_arguments_options[@]}" : \
'-p+[The project containing the tasks]:PROJECT:_default' \
'--project=[The project containing the tasks]:PROJECT:_default' \
'-f+[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'--filter=[The filter containing the tasks. Can add multiple filters separated by commas]:FILTER:_default' \
'-t+[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'--sort=[Choose how results should be sorted]:SORT:((value\:"Sort by Tod'\''s configurable sort value"
datetime\:"Sort by datetime only"
todoist\:"Leave Todoist'\''s default sorting in place"))' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
'-p+[The file or directory to fuzzy find in]:PATH:_default' \
'--path=[The file or directory to fuzzy find in]:PATH:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__list__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-list-help-command-$line[1]:"
        case $line[1] in
            (view)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(process)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(prioritize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(timebox)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(label)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(schedule)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(deadline)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-config-command-$line[1]:"
        case $line[1] in
            (check-version)
_arguments "${_arguments_options[@]}" : \
'--repo=[Manually specify the method to use for installing updates]:REPO:_default' \
'-f[Automatically install the latest version if available]' \
'--force[Automatically install the latest version if available]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(reset)
_arguments "${_arguments_options[@]}" : \
'--force[Skip confirmation and force deletion]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(set-timezone)
_arguments "${_arguments_options[@]}" : \
'-t+[TimeZone to add, i.e. "Canada/Pacific"]:TIMEZONE:_default' \
'--timezone=[TimeZone to add, i.e. "Canada/Pacific"]:TIMEZONE:_default' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-config-help-command-$line[1]:"
        case $line[1] in
            (check-version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set-timezone)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(auth)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-auth-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__auth__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-auth-help-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(shell)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__shell_commands" \
"*::: :->shell" \
&& ret=0

    case $state in
    (shell)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-shell-command-$line[1]:"
        case $line[1] in
            (completions)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':shell:(bash zsh fish power-shell elvish)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__shell__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-shell-help-command-$line[1]:"
        case $line[1] in
            (completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(test)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
":: :_tod__test_commands" \
"*::: :->test" \
&& ret=0

    case $state in
    (test)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-test-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__test__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-test-help-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-command-$line[1]:"
        case $line[1] in
            (project)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__project_commands" \
"*::: :->project" \
&& ret=0

    case $state in
    (project)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-project-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(remove)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rename)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(empty)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(section)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__section_commands" \
"*::: :->section" \
&& ret=0

    case $state in
    (section)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-section-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(task)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__task_commands" \
"*::: :->task" \
&& ret=0

    case $state in
    (task)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-task-command-$line[1]:"
        case $line[1] in
            (quick-add)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(comment)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(list)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__list_commands" \
"*::: :->list" \
&& ret=0

    case $state in
    (list)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-list-command-$line[1]:"
        case $line[1] in
            (view)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(process)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(prioritize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(timebox)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(label)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(schedule)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(deadline)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-config-command-$line[1]:"
        case $line[1] in
            (check-version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(reset)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(set-timezone)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(auth)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-auth-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(shell)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__shell_commands" \
"*::: :->shell" \
&& ret=0

    case $state in
    (shell)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-shell-command-$line[1]:"
        case $line[1] in
            (completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(test)
_arguments "${_arguments_options[@]}" : \
":: :_tod__help__test_commands" \
"*::: :->test" \
&& ret=0

    case $state in
    (test)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:tod-help-test-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_tod_commands] )) ||
_tod_commands() {
    local commands; commands=(
'project:(p) Commands that change projects' \
'section:(n) Commands that change projects' \
'task:(t) Commands for individual tasks' \
'list:(l) Commands for multiple tasks' \
'config:(c) Commands around configuration and the app' \
'auth:(a) Commands for logging in with OAuth' \
'shell:(s) Commands for generating shell completions' \
'test:(e) Commands for manually testing Tod against the API' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod commands' commands "$@"
}
(( $+functions[_tod__auth_commands] )) ||
_tod__auth_commands() {
    local commands; commands=(
'login:(l) Log into Todoist using OAuth' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod auth commands' commands "$@"
}
(( $+functions[_tod__auth__help_commands] )) ||
_tod__auth__help_commands() {
    local commands; commands=(
'login:(l) Log into Todoist using OAuth' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod auth help commands' commands "$@"
}
(( $+functions[_tod__auth__help__help_commands] )) ||
_tod__auth__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod auth help help commands' commands "$@"
}
(( $+functions[_tod__auth__help__login_commands] )) ||
_tod__auth__help__login_commands() {
    local commands; commands=()
    _describe -t commands 'tod auth help login commands' commands "$@"
}
(( $+functions[_tod__auth__login_commands] )) ||
_tod__auth__login_commands() {
    local commands; commands=()
    _describe -t commands 'tod auth login commands' commands "$@"
}
(( $+functions[_tod__config_commands] )) ||
_tod__config_commands() {
    local commands; commands=(
'check-version:(v) Check to see if tod is on the latest version, returns exit code 1 if out of date. Does not need a configuration file' \
'reset:(r) Deletes the configuration file (if present). Errors if the file does not exist' \
'set-timezone:(tz) Change the timezone in the configuration file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod config commands' commands "$@"
}
(( $+functions[_tod__config__check-version_commands] )) ||
_tod__config__check-version_commands() {
    local commands; commands=()
    _describe -t commands 'tod config check-version commands' commands "$@"
}
(( $+functions[_tod__config__help_commands] )) ||
_tod__config__help_commands() {
    local commands; commands=(
'check-version:(v) Check to see if tod is on the latest version, returns exit code 1 if out of date. Does not need a configuration file' \
'reset:(r) Deletes the configuration file (if present). Errors if the file does not exist' \
'set-timezone:(tz) Change the timezone in the configuration file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod config help commands' commands "$@"
}
(( $+functions[_tod__config__help__check-version_commands] )) ||
_tod__config__help__check-version_commands() {
    local commands; commands=()
    _describe -t commands 'tod config help check-version commands' commands "$@"
}
(( $+functions[_tod__config__help__help_commands] )) ||
_tod__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod config help help commands' commands "$@"
}
(( $+functions[_tod__config__help__reset_commands] )) ||
_tod__config__help__reset_commands() {
    local commands; commands=()
    _describe -t commands 'tod config help reset commands' commands "$@"
}
(( $+functions[_tod__config__help__set-timezone_commands] )) ||
_tod__config__help__set-timezone_commands() {
    local commands; commands=()
    _describe -t commands 'tod config help set-timezone commands' commands "$@"
}
(( $+functions[_tod__config__reset_commands] )) ||
_tod__config__reset_commands() {
    local commands; commands=()
    _describe -t commands 'tod config reset commands' commands "$@"
}
(( $+functions[_tod__config__set-timezone_commands] )) ||
_tod__config__set-timezone_commands() {
    local commands; commands=()
    _describe -t commands 'tod config set-timezone commands' commands "$@"
}
(( $+functions[_tod__help_commands] )) ||
_tod__help_commands() {
    local commands; commands=(
'project:(p) Commands that change projects' \
'section:(n) Commands that change projects' \
'task:(t) Commands for individual tasks' \
'list:(l) Commands for multiple tasks' \
'config:(c) Commands around configuration and the app' \
'auth:(a) Commands for logging in with OAuth' \
'shell:(s) Commands for generating shell completions' \
'test:(e) Commands for manually testing Tod against the API' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod help commands' commands "$@"
}
(( $+functions[_tod__help__auth_commands] )) ||
_tod__help__auth_commands() {
    local commands; commands=(
'login:(l) Log into Todoist using OAuth' \
    )
    _describe -t commands 'tod help auth commands' commands "$@"
}
(( $+functions[_tod__help__auth__login_commands] )) ||
_tod__help__auth__login_commands() {
    local commands; commands=()
    _describe -t commands 'tod help auth login commands' commands "$@"
}
(( $+functions[_tod__help__config_commands] )) ||
_tod__help__config_commands() {
    local commands; commands=(
'check-version:(v) Check to see if tod is on the latest version, returns exit code 1 if out of date. Does not need a configuration file' \
'reset:(r) Deletes the configuration file (if present). Errors if the file does not exist' \
'set-timezone:(tz) Change the timezone in the configuration file' \
    )
    _describe -t commands 'tod help config commands' commands "$@"
}
(( $+functions[_tod__help__config__check-version_commands] )) ||
_tod__help__config__check-version_commands() {
    local commands; commands=()
    _describe -t commands 'tod help config check-version commands' commands "$@"
}
(( $+functions[_tod__help__config__reset_commands] )) ||
_tod__help__config__reset_commands() {
    local commands; commands=()
    _describe -t commands 'tod help config reset commands' commands "$@"
}
(( $+functions[_tod__help__config__set-timezone_commands] )) ||
_tod__help__config__set-timezone_commands() {
    local commands; commands=()
    _describe -t commands 'tod help config set-timezone commands' commands "$@"
}
(( $+functions[_tod__help__help_commands] )) ||
_tod__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod help help commands' commands "$@"
}
(( $+functions[_tod__help__list_commands] )) ||
_tod__help__list_commands() {
    local commands; commands=(
'view:(v) View a list of tasks' \
'process:(c) Complete a list of tasks one by one in priority order' \
'prioritize:(z) Give every task a priority' \
'timebox:(t) Give every task at date, time, and length' \
'label:(l) Iterate through tasks and apply labels from defined choices. Use label flag once per label to choose from' \
'schedule:(s) Assign dates to all tasks individually' \
'deadline:(d) Assign deadlines to all non-recurring tasks without deadlines individually' \
'import:(i) Create tasks from a text file, one per line using natural language. Skips empty lines' \
    )
    _describe -t commands 'tod help list commands' commands "$@"
}
(( $+functions[_tod__help__list__deadline_commands] )) ||
_tod__help__list__deadline_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list deadline commands' commands "$@"
}
(( $+functions[_tod__help__list__import_commands] )) ||
_tod__help__list__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list import commands' commands "$@"
}
(( $+functions[_tod__help__list__label_commands] )) ||
_tod__help__list__label_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list label commands' commands "$@"
}
(( $+functions[_tod__help__list__prioritize_commands] )) ||
_tod__help__list__prioritize_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list prioritize commands' commands "$@"
}
(( $+functions[_tod__help__list__process_commands] )) ||
_tod__help__list__process_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list process commands' commands "$@"
}
(( $+functions[_tod__help__list__schedule_commands] )) ||
_tod__help__list__schedule_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list schedule commands' commands "$@"
}
(( $+functions[_tod__help__list__timebox_commands] )) ||
_tod__help__list__timebox_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list timebox commands' commands "$@"
}
(( $+functions[_tod__help__list__view_commands] )) ||
_tod__help__list__view_commands() {
    local commands; commands=()
    _describe -t commands 'tod help list view commands' commands "$@"
}
(( $+functions[_tod__help__project_commands] )) ||
_tod__help__project_commands() {
    local commands; commands=(
'create:(c) Create a new project in Todoist and add to config' \
'list:(l) List all of the projects in config' \
'remove:(r) Remove a project from config (not Todoist)' \
'delete:(d) Remove a project from Todoist' \
'rename:(n) Rename a project in config (not in Todoist)' \
'import:(i) Get projects from Todoist and prompt to add to config' \
'empty:(e) Empty a project by putting tasks in other projects"' \
    )
    _describe -t commands 'tod help project commands' commands "$@"
}
(( $+functions[_tod__help__project__create_commands] )) ||
_tod__help__project__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project create commands' commands "$@"
}
(( $+functions[_tod__help__project__delete_commands] )) ||
_tod__help__project__delete_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project delete commands' commands "$@"
}
(( $+functions[_tod__help__project__empty_commands] )) ||
_tod__help__project__empty_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project empty commands' commands "$@"
}
(( $+functions[_tod__help__project__import_commands] )) ||
_tod__help__project__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project import commands' commands "$@"
}
(( $+functions[_tod__help__project__list_commands] )) ||
_tod__help__project__list_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project list commands' commands "$@"
}
(( $+functions[_tod__help__project__remove_commands] )) ||
_tod__help__project__remove_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project remove commands' commands "$@"
}
(( $+functions[_tod__help__project__rename_commands] )) ||
_tod__help__project__rename_commands() {
    local commands; commands=()
    _describe -t commands 'tod help project rename commands' commands "$@"
}
(( $+functions[_tod__help__section_commands] )) ||
_tod__help__section_commands() {
    local commands; commands=(
'create:(c) Create a new section for a project in Todoist' \
    )
    _describe -t commands 'tod help section commands' commands "$@"
}
(( $+functions[_tod__help__section__create_commands] )) ||
_tod__help__section__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod help section create commands' commands "$@"
}
(( $+functions[_tod__help__shell_commands] )) ||
_tod__help__shell_commands() {
    local commands; commands=(
'completions:(b) Generate shell completions for various shells. Does not need a configuration file' \
    )
    _describe -t commands 'tod help shell commands' commands "$@"
}
(( $+functions[_tod__help__shell__completions_commands] )) ||
_tod__help__shell__completions_commands() {
    local commands; commands=()
    _describe -t commands 'tod help shell completions commands' commands "$@"
}
(( $+functions[_tod__help__task_commands] )) ||
_tod__help__task_commands() {
    local commands; commands=(
'quick-add:(q) Create a new task using NLP' \
'create:(c) Create a new task (without NLP)' \
'edit:(e) Edit an existing task'\''s content' \
'next:(n) Get the next task by priority' \
'complete:(o) Complete the last task fetched with the next command' \
'comment:(m) Add a comment to the last task fetched with the next command' \
    )
    _describe -t commands 'tod help task commands' commands "$@"
}
(( $+functions[_tod__help__task__comment_commands] )) ||
_tod__help__task__comment_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task comment commands' commands "$@"
}
(( $+functions[_tod__help__task__complete_commands] )) ||
_tod__help__task__complete_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task complete commands' commands "$@"
}
(( $+functions[_tod__help__task__create_commands] )) ||
_tod__help__task__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task create commands' commands "$@"
}
(( $+functions[_tod__help__task__edit_commands] )) ||
_tod__help__task__edit_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task edit commands' commands "$@"
}
(( $+functions[_tod__help__task__next_commands] )) ||
_tod__help__task__next_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task next commands' commands "$@"
}
(( $+functions[_tod__help__task__quick-add_commands] )) ||
_tod__help__task__quick-add_commands() {
    local commands; commands=()
    _describe -t commands 'tod help task quick-add commands' commands "$@"
}
(( $+functions[_tod__help__test_commands] )) ||
_tod__help__test_commands() {
    local commands; commands=(
'all:(a) Hit all API endpoints' \
    )
    _describe -t commands 'tod help test commands' commands "$@"
}
(( $+functions[_tod__help__test__all_commands] )) ||
_tod__help__test__all_commands() {
    local commands; commands=()
    _describe -t commands 'tod help test all commands' commands "$@"
}
(( $+functions[_tod__list_commands] )) ||
_tod__list_commands() {
    local commands; commands=(
'view:(v) View a list of tasks' \
'process:(c) Complete a list of tasks one by one in priority order' \
'prioritize:(z) Give every task a priority' \
'timebox:(t) Give every task at date, time, and length' \
'label:(l) Iterate through tasks and apply labels from defined choices. Use label flag once per label to choose from' \
'schedule:(s) Assign dates to all tasks individually' \
'deadline:(d) Assign deadlines to all non-recurring tasks without deadlines individually' \
'import:(i) Create tasks from a text file, one per line using natural language. Skips empty lines' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod list commands' commands "$@"
}
(( $+functions[_tod__list__deadline_commands] )) ||
_tod__list__deadline_commands() {
    local commands; commands=()
    _describe -t commands 'tod list deadline commands' commands "$@"
}
(( $+functions[_tod__list__help_commands] )) ||
_tod__list__help_commands() {
    local commands; commands=(
'view:(v) View a list of tasks' \
'process:(c) Complete a list of tasks one by one in priority order' \
'prioritize:(z) Give every task a priority' \
'timebox:(t) Give every task at date, time, and length' \
'label:(l) Iterate through tasks and apply labels from defined choices. Use label flag once per label to choose from' \
'schedule:(s) Assign dates to all tasks individually' \
'deadline:(d) Assign deadlines to all non-recurring tasks without deadlines individually' \
'import:(i) Create tasks from a text file, one per line using natural language. Skips empty lines' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod list help commands' commands "$@"
}
(( $+functions[_tod__list__help__deadline_commands] )) ||
_tod__list__help__deadline_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help deadline commands' commands "$@"
}
(( $+functions[_tod__list__help__help_commands] )) ||
_tod__list__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help help commands' commands "$@"
}
(( $+functions[_tod__list__help__import_commands] )) ||
_tod__list__help__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help import commands' commands "$@"
}
(( $+functions[_tod__list__help__label_commands] )) ||
_tod__list__help__label_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help label commands' commands "$@"
}
(( $+functions[_tod__list__help__prioritize_commands] )) ||
_tod__list__help__prioritize_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help prioritize commands' commands "$@"
}
(( $+functions[_tod__list__help__process_commands] )) ||
_tod__list__help__process_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help process commands' commands "$@"
}
(( $+functions[_tod__list__help__schedule_commands] )) ||
_tod__list__help__schedule_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help schedule commands' commands "$@"
}
(( $+functions[_tod__list__help__timebox_commands] )) ||
_tod__list__help__timebox_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help timebox commands' commands "$@"
}
(( $+functions[_tod__list__help__view_commands] )) ||
_tod__list__help__view_commands() {
    local commands; commands=()
    _describe -t commands 'tod list help view commands' commands "$@"
}
(( $+functions[_tod__list__import_commands] )) ||
_tod__list__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod list import commands' commands "$@"
}
(( $+functions[_tod__list__label_commands] )) ||
_tod__list__label_commands() {
    local commands; commands=()
    _describe -t commands 'tod list label commands' commands "$@"
}
(( $+functions[_tod__list__prioritize_commands] )) ||
_tod__list__prioritize_commands() {
    local commands; commands=()
    _describe -t commands 'tod list prioritize commands' commands "$@"
}
(( $+functions[_tod__list__process_commands] )) ||
_tod__list__process_commands() {
    local commands; commands=()
    _describe -t commands 'tod list process commands' commands "$@"
}
(( $+functions[_tod__list__schedule_commands] )) ||
_tod__list__schedule_commands() {
    local commands; commands=()
    _describe -t commands 'tod list schedule commands' commands "$@"
}
(( $+functions[_tod__list__timebox_commands] )) ||
_tod__list__timebox_commands() {
    local commands; commands=()
    _describe -t commands 'tod list timebox commands' commands "$@"
}
(( $+functions[_tod__list__view_commands] )) ||
_tod__list__view_commands() {
    local commands; commands=()
    _describe -t commands 'tod list view commands' commands "$@"
}
(( $+functions[_tod__project_commands] )) ||
_tod__project_commands() {
    local commands; commands=(
'create:(c) Create a new project in Todoist and add to config' \
'list:(l) List all of the projects in config' \
'remove:(r) Remove a project from config (not Todoist)' \
'delete:(d) Remove a project from Todoist' \
'rename:(n) Rename a project in config (not in Todoist)' \
'import:(i) Get projects from Todoist and prompt to add to config' \
'empty:(e) Empty a project by putting tasks in other projects"' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod project commands' commands "$@"
}
(( $+functions[_tod__project__create_commands] )) ||
_tod__project__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod project create commands' commands "$@"
}
(( $+functions[_tod__project__delete_commands] )) ||
_tod__project__delete_commands() {
    local commands; commands=()
    _describe -t commands 'tod project delete commands' commands "$@"
}
(( $+functions[_tod__project__empty_commands] )) ||
_tod__project__empty_commands() {
    local commands; commands=()
    _describe -t commands 'tod project empty commands' commands "$@"
}
(( $+functions[_tod__project__help_commands] )) ||
_tod__project__help_commands() {
    local commands; commands=(
'create:(c) Create a new project in Todoist and add to config' \
'list:(l) List all of the projects in config' \
'remove:(r) Remove a project from config (not Todoist)' \
'delete:(d) Remove a project from Todoist' \
'rename:(n) Rename a project in config (not in Todoist)' \
'import:(i) Get projects from Todoist and prompt to add to config' \
'empty:(e) Empty a project by putting tasks in other projects"' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod project help commands' commands "$@"
}
(( $+functions[_tod__project__help__create_commands] )) ||
_tod__project__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help create commands' commands "$@"
}
(( $+functions[_tod__project__help__delete_commands] )) ||
_tod__project__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help delete commands' commands "$@"
}
(( $+functions[_tod__project__help__empty_commands] )) ||
_tod__project__help__empty_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help empty commands' commands "$@"
}
(( $+functions[_tod__project__help__help_commands] )) ||
_tod__project__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help help commands' commands "$@"
}
(( $+functions[_tod__project__help__import_commands] )) ||
_tod__project__help__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help import commands' commands "$@"
}
(( $+functions[_tod__project__help__list_commands] )) ||
_tod__project__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help list commands' commands "$@"
}
(( $+functions[_tod__project__help__remove_commands] )) ||
_tod__project__help__remove_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help remove commands' commands "$@"
}
(( $+functions[_tod__project__help__rename_commands] )) ||
_tod__project__help__rename_commands() {
    local commands; commands=()
    _describe -t commands 'tod project help rename commands' commands "$@"
}
(( $+functions[_tod__project__import_commands] )) ||
_tod__project__import_commands() {
    local commands; commands=()
    _describe -t commands 'tod project import commands' commands "$@"
}
(( $+functions[_tod__project__list_commands] )) ||
_tod__project__list_commands() {
    local commands; commands=()
    _describe -t commands 'tod project list commands' commands "$@"
}
(( $+functions[_tod__project__remove_commands] )) ||
_tod__project__remove_commands() {
    local commands; commands=()
    _describe -t commands 'tod project remove commands' commands "$@"
}
(( $+functions[_tod__project__rename_commands] )) ||
_tod__project__rename_commands() {
    local commands; commands=()
    _describe -t commands 'tod project rename commands' commands "$@"
}
(( $+functions[_tod__section_commands] )) ||
_tod__section_commands() {
    local commands; commands=(
'create:(c) Create a new section for a project in Todoist' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod section commands' commands "$@"
}
(( $+functions[_tod__section__create_commands] )) ||
_tod__section__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod section create commands' commands "$@"
}
(( $+functions[_tod__section__help_commands] )) ||
_tod__section__help_commands() {
    local commands; commands=(
'create:(c) Create a new section for a project in Todoist' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod section help commands' commands "$@"
}
(( $+functions[_tod__section__help__create_commands] )) ||
_tod__section__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod section help create commands' commands "$@"
}
(( $+functions[_tod__section__help__help_commands] )) ||
_tod__section__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod section help help commands' commands "$@"
}
(( $+functions[_tod__shell_commands] )) ||
_tod__shell_commands() {
    local commands; commands=(
'completions:(b) Generate shell completions for various shells. Does not need a configuration file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod shell commands' commands "$@"
}
(( $+functions[_tod__shell__completions_commands] )) ||
_tod__shell__completions_commands() {
    local commands; commands=()
    _describe -t commands 'tod shell completions commands' commands "$@"
}
(( $+functions[_tod__shell__help_commands] )) ||
_tod__shell__help_commands() {
    local commands; commands=(
'completions:(b) Generate shell completions for various shells. Does not need a configuration file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod shell help commands' commands "$@"
}
(( $+functions[_tod__shell__help__completions_commands] )) ||
_tod__shell__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'tod shell help completions commands' commands "$@"
}
(( $+functions[_tod__shell__help__help_commands] )) ||
_tod__shell__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod shell help help commands' commands "$@"
}
(( $+functions[_tod__task_commands] )) ||
_tod__task_commands() {
    local commands; commands=(
'quick-add:(q) Create a new task using NLP' \
'create:(c) Create a new task (without NLP)' \
'edit:(e) Edit an existing task'\''s content' \
'next:(n) Get the next task by priority' \
'complete:(o) Complete the last task fetched with the next command' \
'comment:(m) Add a comment to the last task fetched with the next command' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod task commands' commands "$@"
}
(( $+functions[_tod__task__comment_commands] )) ||
_tod__task__comment_commands() {
    local commands; commands=()
    _describe -t commands 'tod task comment commands' commands "$@"
}
(( $+functions[_tod__task__complete_commands] )) ||
_tod__task__complete_commands() {
    local commands; commands=()
    _describe -t commands 'tod task complete commands' commands "$@"
}
(( $+functions[_tod__task__create_commands] )) ||
_tod__task__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod task create commands' commands "$@"
}
(( $+functions[_tod__task__edit_commands] )) ||
_tod__task__edit_commands() {
    local commands; commands=()
    _describe -t commands 'tod task edit commands' commands "$@"
}
(( $+functions[_tod__task__help_commands] )) ||
_tod__task__help_commands() {
    local commands; commands=(
'quick-add:(q) Create a new task using NLP' \
'create:(c) Create a new task (without NLP)' \
'edit:(e) Edit an existing task'\''s content' \
'next:(n) Get the next task by priority' \
'complete:(o) Complete the last task fetched with the next command' \
'comment:(m) Add a comment to the last task fetched with the next command' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod task help commands' commands "$@"
}
(( $+functions[_tod__task__help__comment_commands] )) ||
_tod__task__help__comment_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help comment commands' commands "$@"
}
(( $+functions[_tod__task__help__complete_commands] )) ||
_tod__task__help__complete_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help complete commands' commands "$@"
}
(( $+functions[_tod__task__help__create_commands] )) ||
_tod__task__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help create commands' commands "$@"
}
(( $+functions[_tod__task__help__edit_commands] )) ||
_tod__task__help__edit_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help edit commands' commands "$@"
}
(( $+functions[_tod__task__help__help_commands] )) ||
_tod__task__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help help commands' commands "$@"
}
(( $+functions[_tod__task__help__next_commands] )) ||
_tod__task__help__next_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help next commands' commands "$@"
}
(( $+functions[_tod__task__help__quick-add_commands] )) ||
_tod__task__help__quick-add_commands() {
    local commands; commands=()
    _describe -t commands 'tod task help quick-add commands' commands "$@"
}
(( $+functions[_tod__task__next_commands] )) ||
_tod__task__next_commands() {
    local commands; commands=()
    _describe -t commands 'tod task next commands' commands "$@"
}
(( $+functions[_tod__task__quick-add_commands] )) ||
_tod__task__quick-add_commands() {
    local commands; commands=()
    _describe -t commands 'tod task quick-add commands' commands "$@"
}
(( $+functions[_tod__test_commands] )) ||
_tod__test_commands() {
    local commands; commands=(
'all:(a) Hit all API endpoints' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod test commands' commands "$@"
}
(( $+functions[_tod__test__all_commands] )) ||
_tod__test__all_commands() {
    local commands; commands=()
    _describe -t commands 'tod test all commands' commands "$@"
}
(( $+functions[_tod__test__help_commands] )) ||
_tod__test__help_commands() {
    local commands; commands=(
'all:(a) Hit all API endpoints' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'tod test help commands' commands "$@"
}
(( $+functions[_tod__test__help__all_commands] )) ||
_tod__test__help__all_commands() {
    local commands; commands=()
    _describe -t commands 'tod test help all commands' commands "$@"
}
(( $+functions[_tod__test__help__help_commands] )) ||
_tod__test__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'tod test help help commands' commands "$@"
}

if [ "$funcstack[1]" = "_tod" ]; then
    _tod "$@"
else
    compdef _tod tod
fi
