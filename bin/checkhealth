#! /usr/bin/python3
import shutil
import subprocess
from colorama import Fore, Style
from pylint.reporters.ureports.nodes import Title

############## CLASS FOR TREE NODE ##############

class Program:
    def __init__(self, name, title=None, check_function=None, dependencies=None, description=None):
        self.name = name
        self.title = title
        self.check_function = check_function if callable(check_function) else None
        self.dependencies = dependencies if dependencies else []
        self.checked = False
        self.description = description

    def is_working(self):
        real_title = self.title if self.title else self.name

        if self.checked:
            print(f"  - {Fore.CYAN}SKIPPED{Style.RESET_ALL}: {real_title} already checked")
            return True
        for dependency in self.dependencies:
            if not dependency.is_working():
                print(f"  - {Fore.RED}ERROR{Style.RESET_ALL}: Dependency {dependency.name} failed for {real_title}")
                return False

        if shutil.which(self.name):
            print(f"  - {Fore.GREEN}OK{Style.RESET_ALL}: {real_title} Found")
            if self.check_function:
                try:
                    self.check_function()
                except Exception as e:
                    print(f"  - {Fore.YELLOW}WARNING{Style.RESET_ALL}: {real_title} function failed ({e})")
                    self.checked = False
                    return False
            self.checked = True
            return True
        else:
            print(f"  - {Fore.RED}ERROR{Style.RESET_ALL}: {real_title} Not Found")
            self.checked = False
            return False

    def print_description(self):
        if self.description is not None:
            print(f"\t{self.description}")

############## CHECK PROGRAM LIST ##############

def check_programs_health(programs):
    """
    Check if the given programs are installed on the system and execute associated functions if defined.

    Args:
        programs (list): A list of Program objects to check.

    Prints:
        Diagnosis results in a Neovim-style format.
    """

    HEADER_WIDTH = 60

    def format_header(program_name, seperator):
        line = str(seperator) * HEADER_WIDTH
        name_section = f" {Fore.BLUE}{program_name}{Style.RESET_ALL} "
        start = (HEADER_WIDTH - len(name_section)) // 2
        end = start + len(name_section)
        return line[:start] + name_section + line[end:]

    print(format_header("Healthcheck", "="))

    for program in programs:
        print(format_header(program.name, "-"))
        program.print_description()
        program.is_working()

############## CHECK FUNCTIONS ##############

def python_check():
    try:
        version = subprocess.check_output(["python", "--version"], stderr=subprocess.STDOUT, text=True).strip()
        print(f"\t\t{version}")
    except Exception as e:
        print(f"\t\t{Fore.RED}ERROR{Style.RESET_ALL}: Could not retrieve Python version ({e})")

def git_check():
    try:
        version = subprocess.check_output(["git", "--version"], stderr=subprocess.STDOUT, text=True).strip()
        print(f"\t\t{version}")
    except Exception as e:
        print(f"\t\t {Fore.RED}ERROR{Style.RESET_ALL}: Could not retrieve git version ({e})")

def plasmashell_check():
    try:
        version = subprocess.check_output(["plasmashell", "--version"], stderr=subprocess.STDOUT, text=True).strip()
        print(f"\t\t{version}")
    except Exception as e:
        print(f"\t\t{Fore.RED}ERROR{Style.RESET_ALL}: Could not retrieve Plasma version ({e})")

############## MAIN ##############
if __name__ == "__main__":
    # Define the programs and their dependencies.

    curl = Program("curl")
    git = Program("git", check_function=git_check)
    pipx = Program("pipx")
    python = Program("python", check_function=python_check, dependencies=[pipx])
    node = Program("node")
    npm = Program("npm", dependencies=[node])

    # Neovim section
    fzf = Program("fzf")
    fd = Program("fd")
    rg = Program("rg", title="ripgrep" , description="ripgrep") # ripgrep
    neovim = Program("nvim", title= "Neovim", dependencies=[python, git, fzf, fd, rg])

    # Hyprland section
    hyprshade = Program("hyprshade")
    hypr = Program("Hyprland", dependencies=[python, hyprshade])

    # KDE Plasma
    kdeplasma = Program("plasmashell", title="KDE Plasma", check_function=plasmashell_check, dependencies=[python])

    programs_to_check = [python, neovim, curl, hypr, kdeplasma]

    check_programs_health(programs_to_check)
